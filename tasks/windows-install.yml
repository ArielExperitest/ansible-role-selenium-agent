
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - temp_folder
  - installation_folder
  - clear_temp_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - s3_download_url
  - extra_java_options
  - launcher_file_name

# required dependencies


# set temp folder

- name: make sure temp folder exists
  win_file:
    path: "{{ temp_folder }}"
    state: directory

# download the file

- name: download from s3 url
  win_get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
    use_proxy: "{{ download_use_proxy | default('no') }}"
  when: custom_download_url == ""

- name: download from custom url
  win_get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
    use_proxy: "{{ download_use_proxy | default('no') }}"
  when: custom_download_url != ""

# copy var file

- name: copy var file
  win_template:
    src: agent.varfile.j2
    dest: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}.varfile"

# stop old service

- name: kill the old service
  win_shell: |
    taskkill /F /IM selenium_agent_server.exe /T
  register: killseleniumresults
  changed_when: killseleniumresults.rc == 0 and 'The process "selenium_agent_server.exe" not found.' not in killseleniumresults.stderr
  failed_when: killseleniumresults.rc != 0 and 'The process "selenium_agent_server.exe" not found.' not in killseleniumresults.stderr
  become: yes

# delete old installation (optional)

- name: clear old installation folder
  win_file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True

# unpack all the files and run the installer

- name: make sure installation folder exists
  win_file:
    path: "{{ installation_folder }}"
    state: directory
  become: yes

- name: run the installer
  win_command: "{{ temp_folder }}\\{{ installer_file_name }} -q -wait 180"
  async: 180
  poll: 0
  register: installer_sync
  become: yes

- name: wait for installer
  async_status:
    jid: "{{ installer_sync.ansible_job_id }}"
  register: wait_for_installer
  until: wait_for_installer.finished
  retries: 18
  delay: 10 
  ignore_errors: yes

- name: fail when error is not disconnection
  fail:
    msg: "unrecognized error {{ wait_for_installer.msg }}"
  when:
    - wait_for_installer is failed
    - wait_for_installer.msg != 'Unexpected failure during module execution.'

- name: make sure machine is reachable
  wait_for_connection:
    delay: 0
    sleep: 2
    connect_timeout: 5
    timeout: 60

# configure installed

- name: update vmoptions file
  win_lineinfile:
    path: "{{ installation_folder }}\\selenium_agent_server.vmoptions"
    line: "{{ item }}"
    regexp: "^{{ item }}"
  with_items: "{{ extra_java_options }}"
  become: yes

# clear temp files (optional)

- name: clear temp folder
  win_file:
    path: "{{ temp_folder }}"
    state: absent
  when: clear_temp_folder | default('no') | bool

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      installation_folder: "{{ installation_folder }}"
