
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - temp_folder
  - installation_folder
  - clear_temp_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - s3_download_url
  - vmoptions_properties
  - launcher_file_name

# required dependencies


# set temp folder

- name: make sure temp folder
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

# download the file

- name: download from s3 url
  get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
  when: custom_download_url == ""

- name: download from custom url
  get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
  when: custom_download_url != ""


# copy var file
- name: copy var file
  template:
    src: agent.varfile.j2
    dest: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}.varfile"

# stop old service

- block:
    - name: Get running processes
      shell: "ps -ef | grep selenium_agent  | grep -v grep  | awk '{print $2}'"
      register: running_processes  
    
    - name: print status of running processes
      debug: 
        msg: "{{ running_processes.stdout_lines }}"
    
    - name: Kill running processes
      shell: "sudo kill -9 {{ item }}"
      loop: "{{ running_processes.stdout_lines }}"
  become: yes
  ignore_errors: yes

# delete old installation (optional)

- name: clear old installation folder
  file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True
  notify:
    - start the service

# unpack and copy all the files and add volumes

- name: make sure installation folder exists
  file:
    path: "{{ installation_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: check if disk is attached
  stat:
    path: /Volumes/selenium_agent
  register: stat_result

- name: unmount the attached disk
  command: sudo hdiutil unmount /Volumes/selenium_agent -force
  when: stat_result.stat.exists
  ignore_errors: yes

- name: detach old disks
  command: sudo /bin/bash -c "diskutil list | grep selenium_agent | awk '{print $5}' | xargs -I {} sh -c "hdiutil detach {}""
  ignore_errors: yes

- name: attach new disk
  command: sudo hdiutil attach {{ temp_folder }}/{{ installer_file_name }}


# start installation
- name: Starting silent Installation
  shell: "sudo /Volumes/selenium_agent/SeeTest\\ Selenium\\ Agent\\ Installer.app/Contents/MacOS/JavaApplicationStub  -q -varfile {{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}.varfile -Dinstall4j.alternativeLogfile={{ temp_folder }}/installation-{{ ansible_date_time.epoch }}.log"
  environment:
    PATH: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
  args:
    executable: /bin/bash


# stop service

- block:
    - name: Get running processes
      shell: "ps -ef | grep selenium_agent  | grep -v grep  | awk '{print $2}'"
      register: running_processes  
    
    - name: print status of running processes
      debug: 
        msg: "{{ running_processes.stdout_lines }}"
    
    - name: Kill running processes
      shell: "sudo kill -9 {{ item }}"
      loop: "{{ running_processes.stdout_lines }}"
  become: yes
  ignore_errors: yes

# configure installed 

- name: update vmoptions file
  lineinfile:
    path: "{{ installation_folder }}/selenium_agent_server.vmoptions"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key }}="
  with_dict: "{{ vmoptions_properties }}"
  become: yes

- name: enable safari driver
  shell: sudo /usr/bin/safaridriver --enable
  ignore_errors: yes

- name: copy launcher file
  copy:
    src: run.sh
    dest: "{{ installation_folder }}/"
    mode: 0777

# launch selenium agent (optional)
   
- name: launch selenium agent (mac)
  shell: "sudo {{ installation_folder }}/{{ launcher_file_name }}"
  args:
    executable: /bin/sh
  ignore_errors: yes
  become: yes
  when: start_after_install == True


# clear temp files (optional)

- name: clear temp folder
  file:
    path: "{{ temp_folder }}"
    state: absent
  become: yes
  when: clear_temp_folder == True

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      installation_folder: "{{ installation_folder }}"
