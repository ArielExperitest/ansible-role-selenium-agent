
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - temp_folder
  - installation_folder
  - clear_temp_folder
  - clear_before_install
  - server_port
  - installer_file_name
  - s3_download_url
  - extra_java_options
  - launcher_file_name

# required dependencies

- name: ram test
  block:

    - name: get machine ram
      command: /usr/sbin/sysctl -n hw.memsize
      register: ram_command

    - name: perform ram test
      assert:
        that: ram_command.stdout|int >= 8589934592
        success_msg: "ram test passed: {{ ram_command.stdout }} >= 8589934592"
        fail_msg: "ram test failed: {{ ram_command.stdout }} >= 8589934592"

# set temp folder

- name: make sure temp folder
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

# download the file

- name: download from s3 url
  get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
  when: custom_download_url == ""

- name: download from custom url
  get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
  when: custom_download_url != ""

# copy var file

- name: copy var file
  template:
    src: agent.varfile.j2
    dest: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}.varfile"

# stop old service

- name: stop the service
  block:

    - name: get running processes
      shell: "ps -ef | grep selenium_agent  | grep -v grep  | awk '{print $2}'"
      register: running_processes  
    
    - name: print status of running processes
      debug: 
        msg: "{{ running_processes.stdout_lines }}"
    
    - name: kill running processes
      shell: "kill -9 {{ item }}"
      loop: "{{ running_processes.stdout_lines }}"
  
  become: yes
  ignore_errors: yes

# delete old installation (optional)

- name: clear old installation folder
  file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True

# unpack and copy all the files and add volumes

- name: make sure installation folder exists
  file:
    path: "{{ installation_folder }}"
    state: directory
  become_user: "{{ ansible_user_id }}"
  become: yes

- name: attach the dmg file
  block:

    - name: check if disk is attached
      stat:
        path: /Volumes/selenium_agent
      register: stat_result

    - name: unmount the attached disk
      command: hdiutil unmount /Volumes/selenium_agent -force
      when: stat_result.stat.exists
      ignore_errors: yes

    - name: detach old disks
      command: /bin/bash -c "diskutil list | grep selenium_agent | awk '{print $5}' | xargs -I {} sh -c "hdiutil detach {}""
      ignore_errors: yes

    - name: attach new disk
      command: hdiutil attach {{ temp_folder }}/{{ installer_file_name }}

  become: yes

# start installation

- name: get machine ram
  command: /usr/sbin/sysctl -n hw.memsize
  register: ram_command

- name: starting silent Installation
  shell: "/Volumes/selenium_agent/SeeTest\\ Selenium\\ Agent\\ Installer.app/Contents/MacOS/JavaApplicationStub  -q -varfile {{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}.varfile -Dinstall4j.alternativeLogfile={{ temp_folder }}/installation-logs/{{ ansible_date_time.epoch }}.log"
  environment:
    SELENIUM_RAM: "{{ ram_command.stdout }}"
  args:
    executable: /bin/bash
  become_user: "{{ansible_user_id }}"
  become: yes

# stop service

# /bin/kill -9 `ps -ef | grep selenium_agent_server | grep -v grep | awk '{print $2}' | xargs`
# /bin/kill -9 `ps -ef | grep selenium_grid_node | grep -v grep | awk '{print $2}' | xargs`
# /bin/kill -9 `ps -ef | grep manual.*.jar | grep -v grep | awk '{print $2}' | xargs`
# /bin/kill -9 `ps -ef | grep watch | grep -v grep | awk '{print $2}' | xargs`
# /bin/kill -9 `ps -ef | grep safaridriver | grep -v grep | awk '{print $2}' | xargs`

- name: stop the service
  block:

    - name: get running processes
      shell: "ps -ef | grep selenium_agent  | grep -v grep  | awk '{print $2}'"
      register: running_processes  
    
    - name: print status of running processes
      debug: 
        msg: "{{ running_processes.stdout_lines }}"
    
    - name: kill running processes
      shell: "sudo kill -9 {{ item }}"
      loop: "{{ running_processes.stdout_lines }}"
  
  become: yes
  ignore_errors: yes

# configure installed 

- name: update vmoptions file
  lineinfile:
    path: "{{ installation_folder }}/selenium_agent_server.vmoptions"
    line: "{{ item }}"
    regexp: "^{{ item }}"
  with_items: "{{ extra_java_options }}"
  become_user: "{{ ansible_user_id }}"
  become: yes

# INVESTIGATE do we need this?
- name: enable safari driver
  shell: sudo /usr/bin/safaridriver --enable
  become: yes
  ignore_errors: yes #?

# FIXME move to handler?

# launch selenium agent (optional)

- name: launch selenium agent (mac)
  shell: "{{ installation_folder }}/{{ launcher_file_name }} &"
  become_user: "{{ ansible_user_id }}"
  become: yes
  when: start_after_install == True

# clear temp files (optional)

- name: clear temp folder
  file:
    path: "{{ temp_folder }}"
    state: absent
  become: yes
  when: clear_temp_folder | default('no') | bool

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      installation_folder: "{{ installation_folder }}"
